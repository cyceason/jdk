注解
@Target : 说明了Annotation所修饰的对象范围
	1.CONSTRUCTOR		:	用于描述构造器
	2.FIELD				:	用于描述域
	3.LOCAL_VARIABLE	:	用于描述局部变量
	4.METHOD			:	用于描述方法
	5.PACKAGE			:	用于描述包
	6.PARAMETER			:	用于描述参数
	7.TYPE				:	用于描述类、接口(包括注解类型) 或enum声明
	
@Retention : 表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）
	1.SOURCE			:	在源文件中有效（即源文件保留）
	2.CLASS				:	在class文件中有效（即class保留）
	3.RUNTIM			:	在运行时有效（即运行时保留）
	
@Documented :  用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化

@Inherited : 是一个标记注解, 允许子类继承父类中的注解
	注意 ： @Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。

自定义注解： @interface ： 使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口
    1. 定义注解时，不能继承其他的注解或接口
	2. @interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。
	3. 方法的名称就是参数的名称，
	4. 返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。
	5. 注解参数的可支持数据类型：
	　　　　1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
	　　　　2.String类型
	　　　　3.Class类型
	　　　　4.enum类型
	　　　　5.Annotation类型
	　　　　6.以上所有类型的数组
	5. Annotation类型里面的参数
		1. 只能用public或默认(default)这两个访问权修饰
		2. 参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组
		3. 如果只有一个参数成员,最好把参数名称设为"value"

注解元素的默认值：
	1. 注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法
	2. 空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法